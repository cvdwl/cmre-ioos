# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <markdowncell>

# #Accessing the Unidata THREDDS NetCDF Subset Service
# Using the grid as point service, extracting a time series closest to a specified lon,lat location.  
# 
# At first we use the NetCDF Subset Web Form below to construct the query, but then reuse the URL generated by the form directly in the Python code below.  In this way different time periods, depths or variables may be extracted without returning to the form, and analyzed and visualized in Python without saving and loading CSV files. 

# <codecell>

import pandas as pd
import time
%matplotlib inline

# <codecell>

#REP14
vars = 'temp,salt'
lat = 40.0
lon = 7.5
start = '2014-06-08T00:30:00Z'
stop =  '2014-06-24T00:00:00Z'

# <codecell>

url='http://thredds.socib.es/thredds/ncss/grid/operational_models\
/oceanographical/hydrodynamics/model_run_aggregation/wmopv2/wmopv2_best.ncd?\
var=%s&\
latitude=%f&longitude=%f&\
time_start=%s&time_end=%s&accept=csv' % (vars,lat,lon,start,stop)
print(url)

# <codecell>

# Extract CSV data directly into Pandas DataFrame (and time how long it takes to extract the data)
time0=time.time()
df = pd.read_csv(url,index_col='date',parse_dates=True)  # skip the units row 
print('Elapsed time=%d seconds' % (time.time()-time0))

# <codecell>

# Make a new DataFrame with just the last two variables (temp & salt)
df2=df.ix[:,-2:]  

# <codecell>

# take a look at the first few values
df2.head(5)

# <codecell>

# Plotting time series in Pandas is easy
df2['temp[unit="Celsius"]'].plot(figsize=(12,4),legend=True);

# <codecell>

# calculate the maximum
df2.max()

# <codecell>


